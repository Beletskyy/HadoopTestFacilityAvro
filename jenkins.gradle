job('MyJob') {
    parameters {
        globalVariableParam('hadoop_server', '${HADOOP_HOST}', 'my sandbox')
    }
    scm {
        github('Beletskyy/HadoopTestFacilityAvro')
    }

    triggers {
        scm('* * * * *')
    }
    steps {
        gradle('install')
        publishOverSsh {
            server('${HADOOP_HOST}') {
                label('Sandbox')
                transferSet {
                    sourceFiles('build/libs/**.jar')
                    remoteDirectory('build/libs')
                    flattenFiles(true)
                }
                transferSet {
                    sourceFiles('src/main/resources/**.*')
                    remoteDirectory('build/config')
                    flattenFiles(true)
                }
            }
        }

        remoteShell('root@10.10.21.184:22') {
           command('echo $hadoop_server')
           command('echo root@$hadoop_server:22')
//           command('hadoop fs -rm -f /app')
//           command('hadoop fs -rm -f /app/config')
//           command('hadoop fs -rm -f /app/jar')
//           command('hdfs dfs -mkdir /app')
//           command('hdfs dfs -mkdir /app/config')
//           command('hdfs dfs -mkdir /app/jar')
//           command('hdfs dfs -put build/libs/**.jar /app/jar/')
//           command('hdfs dfs -put build/config/**.* /app/config/')
//           command('oozie job -oozie http://10.10.21.184:11000/oozie -config build/config/job.properties -run')
//           command('rm -rf build')
        }
    }
    publishers {
        checkstyle('build/reports/checkstyle/checkstyle-result.xml') {
                healthLimits(3, 25)
                thresholdLimit('high')
                defaultEncoding('UTF-8')
                canRunOnFailed(true)
                useStableBuildAsReference(true)
                useDeltaValues(true)
                computeNew(true)
            }
        findbugs('build/reports/findbugs/findbugs.xml', false) {
                healthLimits(3, 25)
                thresholdLimit('high')
                defaultEncoding('UTF-8')
                canRunOnFailed(true)
                useStableBuildAsReference(true)
                useDeltaValues(true)
                computeNew(true)
            }
        pmd('build/reports/pmd/pmd.xml') {
            healthLimits(3, 25)
            thresholdLimit('high')
            defaultEncoding('UTF-8')
            canRunOnFailed(true)
            useStableBuildAsReference(true)
            useDeltaValues(true)
            computeNew(true)
        }
    }
}