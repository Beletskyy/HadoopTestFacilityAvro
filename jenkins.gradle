job('build') {
    scm {
        git('git://github.com/Beletskyy/HadoopTestFacilityAvro')
    }

    triggers {
        scm('* * * * *')
    }
    steps {
        gradle('build')
    }
    publishers {
            checkstyle('build/reports/checkstyle/checkstyle-result.xml') {
                healthLimits(3, 25)
                thresholdLimit('high')
                defaultEncoding('UTF-8')
                canRunOnFailed(true)
                useStableBuildAsReference(true)
                useDeltaValues(true)
//                computeNew(true)
//                shouldDetectModules(true)
//                thresholds(
//                        unstableTotal: [all: 1, high: 2, normal: 3, low: 4],
//                        failedTotal: [all: 5, high: 6, normal: 7, low: 8],
//                        unstableNew: [all: 9, high: 10, normal: 11, low: 12],
//                        failedNew: [all: 13, high: 14, normal: 15, low: 16]
//                )
            }
        findbugs('build/reports/findbugs/findbugs.xml', false) {
                healthLimits(3, 25)
                thresholdLimit('high')
                defaultEncoding('UTF-8')
                canRunOnFailed(true)
                useStableBuildAsReference(true)
                useDeltaValues(true)
//                computeNew(true)
//                shouldDetectModules(true)
//                thresholds(
//                        unstableTotal: [all: 1, high: 2, normal: 3, low: 4],
//                        failedTotal: [all: 5, high: 6, normal: 7, low: 8],
//                        unstableNew: [all: 9, high: 10, normal: 11, low: 12],
//                        failedNew: [all: 13, high: 14, normal: 15, low: 16]
//                )
            }
        pmd('build/reports/pmd/pmd.xml') {
            healthLimits(3, 25)
            thresholdLimit('high')
            defaultEncoding('UTF-8')
            canRunOnFailed(true)
            useStableBuildAsReference(true)
            useDeltaValues(true)
//            computeNew(true)
//            shouldDetectModules(true)
//            thresholds(
//                    unstableTotal: [all: 1, high: 2, normal: 3, low: 4],
//                    failedTotal: [all: 5, high: 6, normal: 7, low: 8],
//                    unstableNew: [all: 9, high: 10, normal: 11, low: 12],
//                    failedNew: [all: 13, high: 14, normal: 15, low: 16]
//            )
        }
    }
}
