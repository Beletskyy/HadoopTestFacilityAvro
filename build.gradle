buildscript {
  repositories {
  jcenter()	
    maven { 
    url 'http://repo.spring.io/plugins-release' 
    mavenCentral()
    maven { url "http://clojars.org/repo" }
    }
  }
  dependencies {
    classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.1'
    classpath 'org.apache.maven:maven-artifact:2.2.1' // 3.x won't work
    classpath 'org.apache.avro:avro-compiler:1.7.7'
    classpath 'org.clojars.miguno:avro-gradle-plugin:1.7.7.2'
    classpath 'org.hidetake:gradle-ssh-plugin:2.7.0'
  }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'provided-base'
apply plugin: 'avro-gradle-plugin'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'org.hidetake.ssh'

archivesBaseName = 'facility'

ext.cascadingVersion = '3.0.0'
ext.hadoopVersion = '2.7.3'
sourceCompatibility = 1.7
targetCompatibility = 1.7
checkstyle.toolVersion = '6.18'
findbugs.toolVersion = '3.0.1'
pmd.toolVersion = '5.5.2'

dependencies {
  compileAvro
}

compileAvro {
  source = 'src/main/avro'
  destinationDir = file("src/main/java")
  // Uncomment the following line to explicitly set the Java type
  // to be emitted for string schemas (here: java.lang.String).
  stringType = 'String'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'http://conjars.org/repo/' }
}

dependencies {
  compile( group: 'cascading', name: 'cascading-core', version: cascadingVersion )
  compile( group: 'cascading', name: 'cascading-local', version: cascadingVersion )
  compile( group: 'cascading', name: 'cascading-hadoop2-mr1', version: cascadingVersion )
  compile( group: 'cascading', name: 'cascading-hadoop', version: cascadingVersion )

  provided( group: 'org.apache.hadoop', name: 'hadoop-common', version: hadoopVersion )
  provided( group: 'org.apache.hadoop', name: 'hadoop-client', version: hadoopVersion )
  provided( group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client-core', version: hadoopVersion )
}

jar {
  description = "Assembles a Hadoop ready jar file"
/*  doFirst {
    into( 'lib' ) {
      from { configurations.compile.minus( [configurations.provided] ) }
    }
  }*/
  manifest {
    attributes( "Main-Class": "com/nixsolutions/hadoop/facilityavro/Main" )
  }
}

/*tasks.withType(Checkstyle) {
  reports {
    source 'src'
    html.enabled false
    xml.enabled true
    xml.destination rootProject.file("build/reports/checkstyle/checkstyle-result.xml")
    ignoreFailures = true
  }
}

tasks.withType(FindBugs) {
  reports {
    html.enabled false
    xml.enabled true
    xml.destination rootProject.file("build/reports/findbugs/findbugs.xml")
    effort = "max"
    reportLevel = "high"
    ignoreFailures = true
  }
}

tasks.withType(Pmd) {
  reports {
    ignoreFailures = true
    html.enabled false
    xml.enabled true
    xml.destination rootProject.file("build/reports/pmd/pmd.xml")
    ruleSets = [
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-comments',
            'java-controversial',
            'java-coupling',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-j2ee',
            'java-javabeans',
            'java-junit',
            'java-logging-jakarta-commons',
            'java-logging-java',
            'java-migrating',
            'java-naming',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-sunsecure',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ]
  }
}*/
