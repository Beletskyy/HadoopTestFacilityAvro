buildscript {
  repositories {
  jcenter()	
    maven { 
    url 'http://repo.spring.io/plugins-release' 
    mavenCentral()
    maven { url "http://clojars.org/repo" } // Required to automatically download this plugin
    }
  }
  dependencies {
    classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.1'
    classpath 'org.apache.maven:maven-artifact:2.2.1' // 3.x won't work
    classpath 'org.apache.avro:avro-compiler:1.7.7'
    classpath 'org.clojars.miguno:avro-gradle-plugin:1.7.7.2'
  }
}

apply plugin: 'java'//собрать jar архив, compileJava — скомпилировать исходные коды и др.
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'provided-base'
apply plugin: 'avro-gradle-plugin'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
//apply plugin: 'pmd'

//apply plugin: 'application'
// tasks: run — запуск приложения;
// installApp — установка приложения на компьютер,
// эта задача создает исполняемые файлы для *nix и для windows (bat файл);
// distZip — собирает приложение в zip архив, помещая туда все jar файлы

archivesBaseName = 'facility'

ext.cascadingVersion = '3.0.0'
ext.hadoopVersion = '2.7.3'

sourceCompatibility = 1.7
targetCompatibility = 1.7
checkstyle {
  toolVersion = '6.18'
}
findbugs.toolVersion = '3.0.1'


dependencies {
  compileAvro
}

compileAvro {
  source = 'src/main/avro'
  destinationDir = file("src/main/java")
  // Uncomment the following line to explicitly set the Java type
  // to be emitted for string schemas (here: java.lang.String).
  stringType = 'String'
}

repositories {
//в качестве url могут использоваться ‘http’, ‘https’ или
// ‘file’ протоколы. Порядок, в котором записаны репозитории,
// влияет на порядок поиска зависимости в репозиториях.
  mavenLocal()
  mavenCentral()
  maven { url 'http://conjars.org/repo/' }
}

dependencies {
  compile( group: 'cascading', name: 'cascading-core', version: cascadingVersion )
  compile( group: 'cascading', name: 'cascading-local', version: cascadingVersion )
  compile( group: 'cascading', name: 'cascading-hadoop2-mr1', version: cascadingVersion )
  compile( group: 'cascading', name: 'cascading-hadoop', version: cascadingVersion )

  provided( group: 'org.apache.hadoop', name: 'hadoop-common', version: hadoopVersion )
  provided( group: 'org.apache.hadoop', name: 'hadoop-client', version: hadoopVersion )
  provided( group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client-core', version: hadoopVersion )
}

jar {
  description = "Assembles a Hadoop ready jar file"
/*  doFirst {
    into( 'lib' ) {
      from { configurations.compile.minus( [configurations.provided] ) }
    }
  }*/

  tasks.withType(Checkstyle) {
    reports {
      source 'src'
      xml.enabled true
      xml.destination rootProject.file("build/reports/checkstyle/checkstyle-result.xml")
      html.enabled false
      html.destination rootProject.file("build/reports/checkstyle/checkstyle-result.html")
      ignoreFailures = true
    }
  }

  tasks.withType(FindBugs) {
    reports {
      xml.enabled true
      xml.destination rootProject.file("build/reports/findbugs/findbugs.xml")
      html.enabled false
      html.destination rootProject.file("build/reports/findbugs/findbugs.html")
      effort = "max"
      reportLevel = "high"
      ignoreFailures = true
    }
  }

  manifest {
    attributes( "Main-Class": "com/nixsolutions/hadoop/facilityavro/Main" )
  }
}